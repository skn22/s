/*
Name:Prathamesh Amrutkar
Rollno:I3103 Div:1

Problem statement:Implement the C program for Deadlock Avoidance Algorithm: Bankers Algorithm.
*/


#include <stdio.h>
#include <stdbool.h>

int n, m;  // n = number of processes, m = number of resource types
int alloc[10][10], max[10][10], need[10][10], avail[10];
bool finish[10];  // Keeps track of finished processes
int safeSeq[10];  // Safe sequence

// Function to calculate the need matrix
void calculateNeed() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

// Safety algorithm function to check if system is in safe state
bool isSafe() {
    int work[10];
    for (int i = 0; i < m; i++) {
        work[i] = avail[i];
    }

    for (int i = 0; i < n; i++) {
        finish[i] = false;
    }

    int count = 0;  // Count of processes in safe sequence
    while (count < n) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }

                // If all resources can be allocated to process i
                if (j == m) {
                    for (int k = 0; k < m; k++) {
                        work[k] += alloc[i][k];
                    }
                    safeSeq[count++] = i;
                    finish[i] = true;
                    found = true;
                }
            }
        }

        if (!found) {
            return false;  // System is not in a safe state
        }
    }

    return true;  // System is in a safe state
}

int main() {
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resource types: ");
    scanf("%d", &m);

    printf("Enter the allocation matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    printf("Enter the maximum matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter the available resources:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &avail[i]);
    }

    // Calculate the need matrix
    calculateNeed();

    // Check if the system is in a safe state
    if (isSafe()) {
        printf("The system is in a safe state.\nSafe sequence is: ");
        for (int i = 0; i < n; i++) {
            printf("%d ", safeSeq[i]);
        }
        printf("\n");
    } else {
        printf("The system is not in a safe state.\n");
    }

    return 0;
}
/* Output:
Enter the number of processes: 5
Enter the number of resource types: 4
Enter the allocation matrix:
0 0 1 2
2 0 0 0
0 0 3 4
2 3 5 4
0 3 3 2
Enter the maximum matrix:
0 0 1 2
2 7 5 0
6 6 5 6
4 3 5 6
0 6 5 2
Enter the available resources:
2 1 0 0
The system is in a safe state.
Safe sequence is: 0 3 4 1 2 
*/